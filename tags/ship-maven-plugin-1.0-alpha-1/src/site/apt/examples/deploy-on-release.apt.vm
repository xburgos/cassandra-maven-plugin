 ~~ Licensed to the Apache Software Foundation (ASF) under one
 ~~ or more contributor license agreements.  See the NOTICE file
 ~~ distributed with this work for additional information
 ~~ regarding copyright ownership.  The ASF licenses this file
 ~~ to you under the Apache License, Version 2.0 (the
 ~~ "License"); you may not use this file except in compliance
 ~~ with the License.  You may obtain a copy of the License at
 ~~
 ~~   http://www.apache.org/licenses/LICENSE-2.0
 ~~
 ~~ Unless required by applicable law or agreed to in writing,
 ~~ software distributed under the License is distributed on an
 ~~ "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 ~~ KIND, either express or implied.  See the License for the
 ~~ specific language governing permissions and limitations
 ~~ under the License.

 -----
 Deploying a version with every release
 -----
 Stephen Connolly
 ------
 2010-11-24
 ------

Deploying a version with every release

  In continuous deployment, releases should be deployed continuously.  The kind of deployment that continuous deployment
  refers to is distinct from deployment to the maven repository, for the sake of clarity, we will call it <<<shipping>>>

  To ship with every release you need to first configure the <<<ship-maven-plugin>>> with the details of how to
  ship your project artifact. Verify that the script works by deploying a released version, e.g. if you have already
  released version 1.0.5


+---+
mvn ship:ship -DshipVersion=1.0.5
+---+

  Once you have established that you can ship your release, the next step is to configure the
  <<<<maven-release-plugin>>> to ship releases, we do this by adding <<<ship:ship>>> to the
  <<<goals>>> configuration.

+---+
<project>
  <build>
    <plugins>
      <plugin>
        <artifactId>maven-release-plugin</artifactId>
        <configuration>
          <goals>deploy ship:ship</goals>
        </configuration>
      </plugin>
    </plugins>
  </build>
</project>
+---+

  Note: If you want quicker release builds, at the expense of a higher risk of the release failing
  you could change the <<<preparationGoals>>> to <<<validate>>> which will effectively stop <<<release:prepare>>>
  from doing anything other than tag the build.

  So an example of an aggressive continuous deployment configuration would be something like:

+---+
<project>
  <build>
    <plugins>
      <plugin>
        <artifactId>maven-release-plugin</artifactId>
        <configuration>
          <preparationGoals>validate</preparationGoals>
          <goals>deploy ship:ship</goals>
        </configuration>
      </plugin>
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>ship-maven-plugin</artifactId>
        <version>${pluginVersion}</version>
        <configuration>
          <shipScript>ship.groovy</shipScript>
        </configuration>
      </plugin>
    </plugins>
  </build>
</project>
+---+
  