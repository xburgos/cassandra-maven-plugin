Maven2 Native Groovy Plugin Archetype

 This an archetype for writing maven 2 plugins in the {{{http://groovy.codehaus.org}Groovy}} language.

* About Groovy

 Groovy is a really powerfull language and is really well suited for writting tests and install procedures.
 It has a powerfull ant bridge that let you use the huge collection of tasks available around without opening a
 single xml tag. It has a simple junit wrapper to write tests even quicker.
 
 Using the an xslt task on a fileset is, for example, just a matter of translating the ant's xml syntax to groovy

+---
def ant = new AntBuilder()

def files = ant.fileScanner {
        fileset(dir: srcDir) {
                include(name: "**/*.xml")
        }
}

for (src in files) {
        def dst = new File(dstDir, src.name)
        ant.xslt(in: src.path, out: dst.path, style: myxsl.path, processor: "trax")
}
+---
 
 The beautifull thing here is that you can add dependency to whatever
 processor you want in your pom.xml (saxon8, xalan). Maven handle all
 dependencies transparently, ant's task choose the first processor
 available, thus the exactly same code (.class) handle a xslt 1.0 or 2.0
 transformation (welcome to the jar heaven).
 
 Just look {{{http://groovy.codehaus.org/Ant+Scripting}here}} to see the possibilities.
 As jelly has been hopefully dropped in maven 2, it's a perfect candidate as a plugin language.

* Installing the Artifact

 To be able to install plugins generated by this artifact you need a working {{{http://maven.apache.org}maven 2.0}} installation,
 the <<<javalike-maven-plugin-tools>>> extension which can parse groovy script to find annotations, and the
 <<<plexus-compiler-groovyc>>> extension which shall compile your groovy script to a regular <<<.class>>>. A maven repository
 containing the needed jars is defined in the <<<pom.xml>>>, so all that stuff should be downloaded automaticly.
 
 There are however some installation issues that require editing of some maven's pom.
 
 In <<<$M2_REPO/org/apache/maven/plugins/maven-plugin-plugin/2.0/maven-plugin-plugin-2.0.pom>>>
 
+--
- <artifactId>maven-plugin-tools-java</artifactId>
+ <artifactId>javalike-maven-plugin-tools</artifactId>
+--

 In <<<$M2_REPO/org/apache/maven/plugins/maven-compiler-plugin/2.0/maven-compiler-plugin-2.0.pom>>>
 
+---
+ <dependency>
+  <groupId>org.codehaus.plexus</groupId>
+  <artifactId>plexus-compiler-groovyc</artifactId>
+    <version>1.5.1</version>
+    <scope>runtime</scope>
+ </dependency>
+---

* Usage
 
 You should be ready now to build your first groovy plugin
 
+---
mvn archetype:create \
  -DgroupId=my.maven \
  -DpackageName=my.maven.test \
  -DartifactId=maven-test-plugin \
  -DarchetypeVersion=1.0 \
  -DarchetypeGroupId=org.codehaus.archetype
  -DarchetypeArtifactId=groovymojo-maven-archetype

cd maven-test-plugin

mvn install

mvn my.maven:maven-test-plugin:1.0-SNAPSHOT:test
+---

 To be able to just type <<<mvn test:test>>>, edit <<<~/.m2/settings.xml>>>

+---
<settings>
  ...
  <pluginGroups>
    ...
    <pluginGroup>my.maven</pluginGroup>
  </pluginGroups>
</settings>
+---

* How it works

 A Groovy file can be compiled to a <<<.class>>>, and if you look a the <<<MyMojo.groovy>>> it's looks nearly like a <<<.java>>>.
 The <<<javalike-maven-plugin-tools>>> is responsible to parse the <<<.groovy>>> to find javadoc annotations and build
 the <<<plugin.xml>>> file.
 
 Javadoc annotations serve as a facility to bind your pluging to a build goal and phase and drive composition with other maven's
 components directly from the source code (without boring editing end maintaining an external <<<.xml>>>).
 
 Once the <<<plugin.xml>>> has been constructed, it's time to bytecode the <<<.groovy>>> classes before packaging. This is the purpose
 of the <<<groovyc-maven-plugin>>>.
 
* Bugs
 
 <<<javalike-maven-plugin-tools>>> is basicaly a copy and paste of the <<<maven-plugin-tools-java>>>, and the parser expect in fact
 a <<<.java>>> source. If you have such an exception
 
+---
java.lang.NullPointerException
        at org.apache.maven.plugin.descriptor.PluginDescriptor.getMojo(PluginDescriptor.java:261)
        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.getMojoDescriptor(DefaultLifecycleExecutor.java:1363)
        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.segmentTaskListByAggregationNeeds(DefaultLifecycleExecutor.java:376)
+---
 
  That's because the <<<plugin.xml>>> is empty: a parser error had certainly occured during the packaging. Take care that your groovy
  script is the closest possible to java syntax (specially above important javadocs comments: class declaration and private members).
  Don't forget the <<<;>>> (optional in groovy) and use java keyworks instead of groovy ones for your class declaration.
  
* See also
 
 The maven site for deeper explanations on {{{http://maven.apache.org/guides/plugin/guide-java-plugin-development.html}how to write plugins}}
 