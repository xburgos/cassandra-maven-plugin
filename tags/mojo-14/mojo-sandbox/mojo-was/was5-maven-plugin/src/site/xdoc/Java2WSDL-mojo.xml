<document>
  <properties>
    <title>was5-plugin - was5:Java2WSDL</title>
    </properties>
  <body>
    <section name="was5:Java2WSDL">
      <p>The Java2WSDL command maps a Java class to a Web
				Services Description Language (WSDL) file by following
				the Java API for XML-based remote procedure call
				(JAX-RPC) specification. The Java2WSDL command accepts a
				Java class as input and produces a WSDL file
				representing the input class. If there is an existing
				file at the output location, it is overwritten. The WSDL
				file generated by the Java2WSDL command contains WSDL
				and XML schema constructs that are automatically derived
				from the input class. You can override these default
				values with command-line arguments.</p>
      <p>Parameters for the goal: </p>
      <table>
        <tr>
          <th>Parameter</th>
          <th>Type</th>
          <th>Expression</th>
          <th>Default Value</th>
          <th>Description</th>
          </tr>
        <tr>
          <td>
            <code>wasHome</code>
            </td>
          <td>
            <code title="java.lang.String">String</code>
            </td>
          <td>
            <code>${wasHome}</code>
            </td>
          <td>
            <code>-</code>
            </td>
          <td>Location of WebSphere installation (normally the
						WAS_HOME environment variable). [path to
						WebSphere]</td>
          </tr>
        <tr>
          <td>
            <code>output</code> <i>(Optional)</i></td>
          <td>
            <code title="java.lang.String">String</code>
            </td>
          <td>
            <code>${output}</code>
            </td>
          <td>
            <code>-</code>
            </td>
          <td>Pathname of wsdl file to create</td>
          </tr>
        <tr>
          <td>
            <code>className</code> <i>(Optional)</i></td>
          <td>
            <code title="java.lang.String">String</code>
            </td>
          <td>
            <code>${className}</code>
            </td>
          <td>
            <code>-</code>
            </td>
          <td>Represents the fully qualified name of one of
						the following Java classes: * Stateless session
						EJB remote interface that extends the
						javax.ejb.EJBObject class * Service Endpoint
						Interface that extends the java.rmi.Remote class
						* Java bean</td>
          </tr>
        <tr>
          <td>
            <code>implClass</code> <i>(Optional)</i></td>
          <td>
            <code title="java.lang.String">String</code>
            </td>
          <td>
            <code>${implClass}</code>
            </td>
          <td>
            <code>-</code>
            </td>
          <td>The Java2WSDL command uses method parameter
						names to construct the WSDL file message part
						names. The command automatically obtains the
						message names from the debug information in the
						class. If the class is compiled without debug
						information, or if the class is an interface,
						the method parameter names are not available. In
						this case, you can use the -implClass argument
						to provide an alternative class from which to
						obtain method parameter names. The impl-class
						does not need to implement the class if the
						class is an interface, but it must implement the
						same methods as class.</td>
          </tr>
        <tr>
          <td>
            <code>namespace</code> <i>(Optional)</i></td>
          <td>
            <code title="java.lang.String">String</code>
            </td>
          <td>
            <code>${namespace}</code>
            </td>
          <td>
            <code>-</code>
            </td>
          <td>Target namespace for the WSDL file being
						generated</td>
          </tr>
        <tr>
          <td>
            <code>location</code> <i>(Optional)</i></td>
          <td>
            <code title="java.lang.String">String</code>
            </td>
          <td>
            <code>${location}</code>
            </td>
          <td>
            <code>-</code>
            </td>
          <td>Location or URL of the service</td>
          </tr>
        <tr>
          <td>
            <code>mapNamespace</code> <i>(Optional)</i></td>
          <td>
            <code title="java.lang.String">String</code>
            </td>
          <td>
            <code>${mapNamespace}</code>
            </td>
          <td>
            <code>-</code>
            </td>
          <td>Namespace to map to</td>
          </tr>
        <tr>
          <td>
            <code>mapPackage</code> <i>(Optional)</i></td>
          <td>
            <code title="java.lang.String">String</code>
            </td>
          <td>
            <code>${mapPackage}</code>
            </td>
          <td>
            <code>-</code>
            </td>
          <td>Java package to map</td>
          </tr>
        <tr>
          <td>
            <code>ant.basedir</code>
            </td>
          <td>
            <code title="java.io.File">File</code>
            </td>
          <td>
            <code>${antBasedir}</code>
            </td>
          <td>
            <code>${basedir}</code>
            </td>
          <td>The base directory from which to execute the Ant script.</td>
          </tr>
        <tr>
          <td>
            <code>ant.messageLevel</code> <i>(Optional)</i></td>
          <td>
            <code title="java.lang.String">String</code>
            </td>
          <td>
            <code>${antMessageLevel}</code>
            </td>
          <td>
            <code>info</code>
            </td>
          <td>The message-level used to tune the verbosity of Ant logging.</td>
          </tr>
        </table>
      </section>
    </body>
  </document>