report.javancss.name=JavaNCSS Report
report.javancss.description=Code metric analysis.
report.javancss.title=JavaNCSS Metric Results
# titles and links
report.javancss.main.title=JavaNCSS Metric Results
report.javancss.main.text=The following document contains the results of a JavaNCSS metric analysis.
report.javancss.module.title=Modules
report.javancss.module.link=modules
report.javancss.package.title=Packages
report.javancss.package.link=package
report.javancss.package.text=Packages sorted by NCSS.
report.javancss.object.title=Objects
report.javancss.object.link=object
report.javancss.top=TOP
report.javancss.averages=Averages.
report.javancss.object.byncss=classes containing the most NCSS.
report.javancss.object.byfunction=classes containing the most functions.
report.javancss.function.title=Functions
report.javancss.function.link=function
report.javancss.function.byncss=functions containing the most NCSS.
report.javancss.explanation.title=Explanations
report.javancss.explanation.link=explanation
# headers
report.javancss.header.module=Module
report.javancss.header.classe=Classes
report.javancss.header.function=Functions
report.javancss.header.ncss=NCSS
report.javancss.header.javadoc=Javadocs
report.javancss.header.package=Package
report.javancss.header.packages=Packages
report.javancss.header.javadoc_line=Javadoc lines
report.javancss.header.single_comment=Single lines comment
report.javancss.header.multi_comment=Multi lines comment
report.javancss.header.object=Object
report.javancss.header.ccn=CCN
# total
report.javancss.header.totals=Totals
report.javancss.header.ncsstotal=NCSS total
report.javancss.header.functiontotal=Functions total
report.javancss.header.classetotal=Classes total
# average
report.javancss.header.averages=Averages
report.javancss.header.ncssaverage=NCSS average
report.javancss.header.programncss=Program NCSS
report.javancss.header.classeaverage=Classes average
report.javancss.header.functionaverage=Functions average
report.javancss.header.javadocaverage=Javadocs average
report.javancss.header.ccnaverage=CCN average
# explanation
report.javancss.explanation.ncss.title=Non Commenting Source Statements (NCSS)
report.javancss.explanation.ncss.paragraph1=Statements for JavaNCSS are not statements as specified in the Java Language Specification but include all kinds of declarations too. Roughly spoken, NCSS is approximately equivalent to counting ';' and '{' characters in Java source files.
report.javancss.explanation.ncss.paragraph2=Not counted are empty statements, empty blocks or semicolons after closing brackets. Of course, comments don't get counted too. Closing brackets also never get counted, the same applies to blocks in general.
report.javancss.explanation.ncss.paragraph3=In some cases consecutive semicolons are illegal according to the JLS but JavaNCSS still tolerates them (thought JavaNCSS is still more strict as 'javac'). Nevertheless they are never counted as two statements.
report.javancss.explanation.ccn.title=Cyclomatic Complexity Number (CCN)
report.javancss.explanation.ccn.paragraph1=CCN is also know as McCabe Metric. There exists a much hyped theory behind it based on graph theory, but it all comes down to simply counting 'if', 'for', 'while' statements etc. in a method. Whenever the control flow of a method splits, the "CCN counter" gets incremented by one.
report.javancss.explanation.ccn.paragraph1b=Each method has a minimum value of 1 per default. For each of the following Java keywords/statements this value gets incremented by one:
report.javancss.explanation.ccn.paragraph1c=Also if the control flow of a method returns abortively the CCNvalue will be incremented by one:
report.javancss.explanation.ccn.paragraph1d=An ordinary return at the end of method (no matter if it's a function or a procedure) will not be counted.
report.javancss.explanation.ccn.paragraph2=Note that else, default, and finallydon't increment the CCN value any further. On the other hand, a simple method with a switchstatement and a huge block of casestatements can have a surprisingly high CCN value (still it has the same value when converting a switchblock to an equivalent sequence of ifstatements).
report.javancss.explanation.ccn.paragraph3=The first article about this trivial software metric is one of the most cited papers in computer science. Sometimes you just must be the first to point out some basic shit and you are history. It seems just like a wonder that nobody was able to package Lines of Code in a more scientific manner. Now it's too late to label someone's name on it :).
#ncss explanation table
report.javancss.explanation.ncss.table.examples=Examples
report.javancss.explanation.ncss.table.comments=Comments
report.javancss.explanation.ncss.table.package=Package declaration
report.javancss.explanation.ncss.table.import=Import declaration
report.javancss.explanation.ncss.table.class=Class declaration
report.javancss.explanation.ncss.table.interface=Interface declaration
report.javancss.explanation.ncss.table.field=Field declaration
report.javancss.explanation.ncss.table.field.comment=No matter how many fields get actually declared through a comma separated list, and no matter if these fields get actually initialized, only one statement is counted. So \"int a, b, c = 5, d = 6;\" gets only +1 count, not four or even six (let me know if there is good reason to count it differently).
report.javancss.explanation.ncss.table.method=Method declaration
report.javancss.explanation.ncss.table.constructorD=Constructor declaration
report.javancss.explanation.ncss.table.constructorI=Constructor invocation
report.javancss.explanation.ncss.table.statement=Statement declaration
report.javancss.explanation.ncss.table.statement.comment=expression, if, else, while, do, for, switch, break, continue, return, throw, synchronized, catch, finally
report.javancss.explanation.ncss.table.label=Label declaration
report.javancss.explanation.ncss.table.label.comment=normal, case, default
