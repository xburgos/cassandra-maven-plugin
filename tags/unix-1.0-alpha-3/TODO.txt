= TODO =

o Support group, user and modes on files and directories in all formats
 - Default values for user, group and mode: part 1 done, need to be implemented in the mojo
 - Dpkg: Won't be done until replaced with Java
 - Pkg: ok
 - RPM: files ok, need to check directories

o Defaults
 - Add and document default directories for scripts
   - src/main/unix/scripts/<modulation>
   - target/unix/scripts/<modulation>

o Dependency generation

o Signing support
 - Dpkg:
 - Pkg:
 - Rpm:

o Add repository index creation
 - Dpkg: dpkg-scanpackages wrapper implemented. Should be re-implemented in Java..
 - Pkg: buildcat from pkgutil (?)
 - Rpm: (?) - sherriff had some notes on how to do this

o Package compression:
 - Dpkg: Built-in (the data.tar.gz file is already gzipped).
 - Pkg:
 - Rpm: are there any tools that support this?

o Replace the binaries with Java implementations
 - Dpkg:
   DONE: dpkg -c
 - Pkg:
 - Rpm:

o Support chmod assembly operation
 - Has to support includes/excludes

o Support "ln -s" operations

o Validate all (source) file paths before starting to copy.
 - If the last of a whole bunch of files are to be extracted, it would be nice to be reminded that you've forgotten a
   <dependency> on something that you're going to extract.

o Scripts:
 - Support per <package> scripts in addition to the common ones
 - Filtering. Both of project.* elements and package.* elements

o Split out the code that is in ..maven.util into a core module.
  Might be a bit too much, but would make the core more clean. Would be good as the "UnixPackage" concepts would be
  throughout the code. "MissingSettingExceptions" will always relate to the fields in the unix package.

o Support Defaults per platform. The Defaults object should probably be in the common project

o The includes/excludes algorithm is most likely wrong, it should first check for includes and then check for excludes.
  Perhaps verify against an ant build.xml file.

o Support depending on nested archives: tar.gz, tar.bz2, etc (only zip files are supported now)

o Expand the "unix-from-jar-project" test to build multiple packages of the same type

o Make sure all bugs for the plugins are implemented.
 - Including new features

o Add a "platform" concept.
  - A platform is:
    - A packaging format
    - Defaults for file and directory security
  - Current platforms (should be pre-defined):
    - platform=debian
      - format=dpkg
    - platform=ubuntu
      - format=dpkg
    - platform=solaris
      - format=pkg
    - platform=fedora
      - format=rpm
    - platform=redhat
      - format=rpm
  - Possible platforms
    - ArchLinux
    - OpenBSD packages

o Add a "modulation" contept. (one modulation per <package> defined)
  Much like 'classifiers' in Maven, might be smart to use the same concept.
  - Support src/main/files per classifier

o Make sure the result of setLastModified is asserted

o Get commons-vfs to log to Maven or just ignore it

o Make sure that timestamps are preserved for all assembly operations

== Refactorings ==

o Move all common objects to unix-common or unix-core
 - Move stuff to core unless it has dependencies

== Functional Java ==

o Add Option.someE(String msg) like Either.XProjection.valueE();
o Add Hash.keySet() that return a Set

== Pkg ==

o Support custom class installation files (like i.deamon, r.daemon)

o Support "i" and "e" files

o Generate entries for parent directories.
 - Need some way to say how far up to generte (you don't want to specify /usr, /opt, etc)
 - Set permission modes on parent directories.

== RPM ==

o <description> => %description

o <organization> => %vendor

= Documentation =
(More notes and TODOs in the site/ directory)

o Explain possible workflow and where the different Mojos fit in

o Need *lots* of includes/excludes examples, with regexp rewriting

== Integration Test ==

o Make sure that all the validate scripts are using the latest Dpkg/Pkg/Rpm tools to verify all the contents of the
generated packages.

o Test having a .bash_profile file in a <copy> task.

== Use cases supported ==

o Building single packages as a standalone project.
 - Use packaging={dpkg,rpm,pkg}

o Building the same package with different format as a separate project.
 - Figure out how to handle the "primary" artifact.
  - Just create a JAR with the assembly?
  - Does it matter? Will Maven really see the difference as long as it is only the type that is different?
  - Would it be possible to use "tar.gz" as a form of "generic package"

o Building packages as a part of a JAR project.
 - Use package-{dpkg,rpm,pkg}-attached

o Support building multiple packages as a standalone project
 - This should be implemented

o Support building multiple packages as a standalone project
 - This might be implemented

=== Order of execution ===

When an assembly operation is executed this is the order of which the parts of the operation is executed:

 - First the source file is located

= Release Procedure =

o Update Change Log.
 - Scan through changes in svn and hg since last tag
o Update front page with status.
o Update change log on site from this file.
o Subversion properties
 - Expand keywords: find . -name \*.java|grep -v target|xargs svn propset svn:keywords "Id"
 - Set svn:eol-style: find . -name \*.java|grep -v target|xargs svn ps svn:eol-style native

= Change Log =

== For 1.0-alpha-4 ==

o Support 'tar' and 'zip' formats
  Create integration tests similar to the existing tests
o Rename "pkg" to "sysv-pkg"
o Implement support for "%config" and "%doc" in RPM, file classes in solaris.
 - Check how this work in debian
o Improve the error message is an artifact can't be found.
 - Create special exception that is caught in the mojo.
o Run the plugin through a profiler
o Document how to use the u-m-p in a development process. Explain the goals for creating index files, and how to
  run these tools automatically on commit hooks etc.
o Re-implement the FsFileCollector to use a tree internally representing a file system
  - Makes it easier to debug, should be possible to write out the entire tree as a part of the building process
  - Makes it easier to implement proper mkdirs
o Document the flow of the assembly operations. Like:
  1) Find files
  2) Match against include and exclude
  3) Rewrite with pattern
  4) Set attributes

=== Nits ===

o Write proper integation test of FsFileCollector as a replacement of the old SetAttributesOperationTest.
o Consider creating a class that represent a complete set of attributes on a file.
  There has been a few surprises ("some() on None" exceptions) where the attribute was missing. Might be possible to
  require that FileAttributes in unix-core require all fields to be set, and that any null fields must be set by a
  default before given to the core.
o Make the pkg stuff die when the source files has a space in the path names. pkgmk dies on prototypes like this:
  f none /foo/bar.war=/var/opt/hudson/workspace/Myapp - Integration tests/bar.war 0644 root sys

== For 1.0-alpha-3 ==

o DONE: Make sure all files has copyright statement.
o DONE: unix-ar: Remove CloseableIterable
o It should be validated that the toDir doesn't go outside the package root
  - Isn't this implicitly handled by RelativePath? If not, add validation there
o DONE: toDir should default to "/"
o DONE: New assembly operation structure:
 - <copy>+<path> with path == file -> <copy-file>
 - <copy>+<path> with path == directory -> <copy-directory>
 - <extract>+<path> with path == file -> <extract-file>
 - <extract>+<path> with path == directory -> <extract-directory>
o DONE: Pkg: support all installation file types
  Suppored files: depend, checkinstall, compver, copyright, request, space
o DONE: Implement symlinks
o DONE: Support chmod assembly operation
 - Has to support includes/excludes
o Assembly Operation documentation
 - Document each assembly operation separately
o Scripts documentation
 - src/main/unix/scripts, common vs package specific directories

=== Nits ===

o Make sure the site looks good.
 - Check internal links
o Remove RelativePath.asAbsolute()
