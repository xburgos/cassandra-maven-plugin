 ------
 Configuring Axis Tools Plugin
 ------
 Jesse McConnell
 ------
 12 November 2005
 ------
 
 
WSDL2Java Supported Configuration Options:

 * sourceDirectory - src/main/wsdl

 * outputDirectory - target/generated-sources/wsdl

 * packageSpace - com.company.wsdl
 
 * serverSide - true/false
 
 * verbose - true/false
 
 * noImports - true/false

 * timeout - int

 * debug - true/false

 * noWrapped - true/false

 * skeletonDeploy - 

 * NStoPkg - name=value

 * fileNStoPkg - file of properties

 * deployScope - Application, Request, Session

 * all - true/false

 * typeMappingVersion - 1.1/1.2

 * factory - custom class

 * nsInclude - namespace

 * nsExclude - namespace

 * helperGen - true/false

 * username - 

 * password - 
 
 * testCases - true/false

 * runTestCasesAsUnitTests - true/false

 * allElements - true/false
 
 * subPackageByFileName - true/false
 
 * multiple url specification

 []

Java2WSDL Supported Configuration Options
 
 * filename - required

 * input - wsdl file

 * location - url

 * portTypeName

 * bindingName

 * serviceElementName

 * namespace

 * PkgtoNS - name=value

 * methods - List <methods><method>x</method><method>y</method></methods>
 
 * all

 * outputWsdlMode - All, Interface, Implementation

 * locationImport

 * namespaceImpl

 * outputImpl

 * implClass

 * excludes - List <excludes><exclude>x</exclude>..</excludes>

 * stopClasses - List

 * typeMappingVersion

 * soapAction - DEFAULT, OPERATION, NONE

 * style - DOCUMENT, RPC, WRAPPED

 * use - LITERAL, ENCODED

 * extraClasses - List

 * importSchema

 []

Notes:

 The wsdl2java goal will process all .wsdl files in the source directory.

 The subPackageByFileName configuration option will futher nest the generated files into a 
 subproject based on the filename of the .wsdl file.  (ex. foo.bar.wsdl will go 
 into a packagespace of packageSpace.foo.bar)
 
 If the urls configuration is used then new files will be used every execution of the plugin, they aren't 
 timestamped like the file based wsdls to avoid regeneration.  Also you run the risk of breaking your build 
 if the remote server is down and you can't get the wsdl file.
 
 As a side note, if your environment requires you to make use of development wsdls in conjuction with production wsdls
 then investigate the usage of m2 profiles for conditionally executing this plugin based on your current execution environment.

 The wsdl2java goal also can make use of the unit tests generated by the 'testCases' parameter by setting 'runTestCasesAsUnitTests' to 'true'.  This will move the test cases generated by wsdl2java into a test sources directory and add it to the project so it is picked up by surefire.  One note with using this functionality, as of the moment the external resource will need to be up otherwise the unit tests will fail.  I am investigating the best way to moving this into an integration phase target.



