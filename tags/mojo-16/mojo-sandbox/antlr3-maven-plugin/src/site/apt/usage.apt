 ------
 Usage
 ------
 David Holroyd
 ------
 May 2007
 ------

~~ Licensed to the Apache Software Foundation (ASF) under one
~~ or more contributor license agreements.  See the NOTICE file
~~ distributed with this work for additional information
~~ regarding copyright ownership.  The ASF licenses this file
~~ to you under the Apache License, Version 2.0 (the
~~ "License"); you may not use this file except in compliance
~~ with the License.  You may obtain a copy of the License at
~~
~~   http://www.apache.org/licenses/LICENSE-2.0
~~
~~ Unless required by applicable law or agreed to in writing,
~~ software distributed under the License is distributed on an
~~ "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
~~ KIND, either express or implied.  See the License for the
~~ specific language governing permissions and limitations
~~ under the License.

~~ NOTE: For help with the syntax of this file, see:
~~ http://maven.apache.org/guides/mini/guide-apt-format.html

Usage

 To enable the plugin, add the following to you project's pom.xml,

+-----+
<project>
  ...
  <build>
    <plugins>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-antlr3-plugin</artifactId>
        <executions>
          <execution>
            <goals>
              <goal>antlr</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
    </plugins>
  </build>
  ...
</project>
+-----+

 You should place your ANTLRv3 grammar files in <<<src/main/antlr>>>, and
 the plugin with scan the subfolders of this folder looking for grammar files
 (names ending with '.g').

 The generated files will automatically be included in the list of elements
 to be built in the project's compile phase.

* Alternative Filename Extensions

 To use an extension other than .g for grammar files, use the <<<includes>>>
 configuration element (remember to have an entry in this list for .g files
 if you still want them to work as well),

+-----+
      ...
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-antlr3-plugin</artifactId>
        ...
        <configuration>
          <includes>
            <include>**/*.g</include>
            <include>**/*.g3</include>
          </includes>
        </configuration>
      </plugin>
      ...
+-----+

Compiling generated code

 The generated code should just get compiled by running <<<mvn compile>>> etc.
 but you will need to include the ANTLR runtime classes as a dependency of
 your project.  Add the following dependency to your POM,

+-----+
  ...
  <dependency>
    <groupId>org.antlr</groupId>
    <artifactId>antlr-runtime</artifactId>
    <version>3.0</version>
  </dependency>
  ...
+-----+

 Ensure you add a dependency on the Java runtime rather than on the ANTLR tool
 artifact, or you will end up adding the transitive dependencies on
 StringTemplate and the old ANTLRv2 to your project, when all you need are the
 runtime support classes.


Building the Java Package Structure

 If you include java <<<package>>> directives in your grammar, e.g.

+-----+
   @parser::header {
       package com.example;
   }
+-----+

 You will need the generated Java files to be created within the appropriate
 folder structure (i.e. <<<com/example>>>) otherwise the the Java compiler
 will report error messages.

 To achieve the desired result, just put the source grammar file into a folder
 structure that matches the package structure, just as you would structure the
 folder containing a Java source file.

 i.e. assuming the default source directory, the grammar with the header
 in the example above would need to be placed in the folder
 <<<src/main/antlr/com/example>>>.
