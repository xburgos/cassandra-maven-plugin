Maven2 Jelly Plugin Archetype

 This an archetype for reusing {{{http://jakarta.apache.org/commons/jelly/}jelly}} in maven 2.

* About this archetype

 This is a quick and (not so dirty) approach to help you writing java plugin that can interpret some
 jelly scripts you want to reuse, in a maven 2.0 build process. It would be preferrable to implement
 a jelly plugin natively (a plugin factory and a plugin descriptor generator that work directly on .jelly),
 but it's IMHO a waste of time since jelly has been dropped, for a lot good reasons, in maven 2.0.
 
 Ok, but writing plugin directly in java is not so easy. If you're looking for a better solution, just try Groovy
 (<<<groovymojo-maven-archetype>>>). It's a 'real' language that can do much more than jelly and more efficiently.

* Installing the Artifact

 To be able to install plugins generated by this artifact you need a working {{{http://maven.apache.org}maven 2.0}} installation,
 and a very small plugin-api named <<<jellyapi-maven-plugin>>>, available in the same repo.
 
* Usage
 
 To build your first groovy plugin, type :
 
+---
mvn archetype:create \
  -DgroupId=my.maven \
  -DpackageName=my.maven.test \
  -DartifactId=maven-test-plugin \
  -DarchetypeVersion=1.0 \
  -DarchetypeGroupId=org.codehaus.archetype \
  -DarchetypeArtifactId=jellymojo-maven-archetype
  
cd maven-test-plugin

mvn install
+---

 To test it do
 
+---
mvn my.maven:maven-test-plugin:1.0-SNAPSHOT:test
+---

 or add this to <<<$M2_REPO/settings.xml>>>

+---
<settings>
  ...
  <pluginGroups>
    ...
    <pluginGroup>my.maven</pluginGroup>
  </pluginGroups>
</settings>
+---
 
 to be able to just type
 
+---
mvn test:test
+---

* How it works

 This artifact generate 2 java classes under src/main/java, and one simple jelly script under src/main/scripts. The formers are
 essentially to help maven to deduce the parameters needed by your groovy plugin (javadocs annotations) and the later really do the job.
 
 The simpler jelly is composed by an empty class with the 2 mandatory annotation <<<@goal>>> and <<<@description>>>

+---
package my.maven;

/**
 * My jelly mojo
 *
 * @goal test
 * @description my jelly mojo
 * @author me
 * @version $Id$
 */
public class MyMojo
    extends AbstractMojo
{
}
+--- 
 
 The associated jelly script's name is the java class name + .jelly and is should be located under
 src/main/scripts (same hierarchy than the java class).
 
 If your plugin needs parameters, just write the private members' declarations as it is explained
 {{{http://maven.apache.org/guides/plugin/guide-java-plugin-development.html}there}}, and declare
 a setParams method which put key,values pair in params.
 
+---
   /**
     * A test value given to the script at runtime.
     *
     * @parameter expression="${test}" default-value="test is successfull !"
     * @optional
     */
    private String test;

    public void setParams() {
    	super.setParams();
    	params.put("test", test);
    }
+---
 
 Now you have access to a test variable inside your jelly script.
 There are 2 de-facto variables available in your scripts

 * <<<project>>> : (<<<org.apache.maven.project.MavenProject>>>) usefull for accessing your project pom.xml values
 
 * <<<mojo>>> :    (<<<org.apache.maven.plugin.AbstractMojo>>>) usefull for logging
 
 
 Refer to maven docs for deeper explanations of build life cycles, and plugin api.