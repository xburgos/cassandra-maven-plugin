 ------
 Usage
 ------
 Dan Tran
 ------
 2006-04-05
 ------

~~ The MIT License
~~
~~ Copyright (c) 2004, The Codehaus
~~
~~ Permission is hereby granted, free of charge, to any person obtaining a copy of
~~ this software and associated documentation files (the "Software"), to deal in
~~ the Software without restriction, including without limitation the rights to
~~ use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
~~ of the Software, and to permit persons to whom the Software is furnished to do
~~ so, subject to the following conditions:
~~
~~ The above copyright notice and this permission notice shall be included in all
~~ copies or substantial portions of the Software.
~~
~~ THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
~~ IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
~~ FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
~~ AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
~~ LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
~~ OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
~~ SOFTWARE.


Usage

  Brief examples on how to use the build-helper-maven-plugin's goals.
 
* Add more source directories to your project

  Use this example to add more source directories to your project, since
  <<<pom.xml>>> only allows one source directory.

-------------------
<project>
  ...
  <build>
    <plugins>
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>build-helper-maven-plugin</artifactId>
        <version>1.1</version>
        <executions>
          <execution>
            <id>add-source</id>
            <phase>generate-sources</phase>
            <goals>
              <goal>add-source</goal>
            </goals>
            <configuration>
              <sources>
                <source>some directory</source>
                ...
              </sources>
            </configuration>
          </execution>
        </executions>
      </plugin>
    </plugins>
  </build>
</project>
-------------------

* Add more test source directories to your project

  The same as the previous example, but this time we add more test source
  directories to your project.

-------------------
<project>
  ...
  <build>
    <plugins>
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>build-helper-maven-plugin</artifactId>
        <version>1.1</version>
        <executions>
          <execution>
            <id>add-test-source</id>
            <phase>generate-sources</phase>
            <goals>
              <goal>add-test-source</goal>
            </goals>
            <configuration>
              <sources>
                <source>some directory</source>
                ...
              </sources>
            </configuration>
          </execution>
        </executions>
      </plugin>
    </plugins>
  </build>
</project>
-------------------

* Attach additional artifacts to your project

  Typically run after <<<antrun:run>>> to attach antrun's build outputs to the
  project for install and deploy.

-------------------
<project>
  ...
  <build>
    <plugins>
      <plugin>
        <!-- add antrun configuration here -->
      </plugin>
      ...
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>build-helper-maven-plugin</artifactId>
        <version>1.1</version>
        <executions>
          <execution>
            <id>attach-artifacts</id>
            <phase>package</phase>
            <goals>
              <goal>attach-artifact</goal>
            </goals>
            <configuration>
              <artifacts>
                <artifact>
                  <file>some file</file>
                  <type>extension of your file </type>
                  <classifier>optional</classifier>
                </artifact>
                ...
              </artifacts>
            </configuration>
          </execution>
        </executions>
      </plugin>
    </plugins>
  </build>
</project>
-------------------

* Remove project's artifacts from local repository

  Mainly used to remove previously installed large project artifacts in local repository before install phase starts.
  The below example removes all project's artifacts including all versions from its local repository
  at the implicit <package> phase. To remove only the current version, remove <removeAll> configuration
  element or set it to <false>.
  

-------------------
<project>
  ...
  <build>
    <plugins>
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>build-helper-maven-plugin</artifactId>
        <version>1.1</version>
        <executions>
          <execution>
            <id>remove-old-installers</id>
            <goals>
              <goal>remove-project-artifact</goal>
            </goals>
            <configuration>
              <removeAll>true</removeAll>
            </configuration>
          </execution>
        </executions>
      </plugin>
    </plugins>
  </build>
</project>
-------------------
