 ~~ Licensed to the Apache Software Foundation (ASF) under one
 ~~ or more contributor license agreements.  See the NOTICE file
 ~~ distributed with this work for additional information
 ~~ regarding copyright ownership.  The ASF licenses this file
 ~~ to you under the Apache License, Version 2.0 (the
 ~~ "License"); you may not use this file except in compliance
 ~~ with the License.  You may obtain a copy of the License at
 ~~
 ~~   http://www.apache.org/licenses/LICENSE-2.0
 ~~
 ~~ Unless required by applicable law or agreed to in writing,
 ~~ software distributed under the License is distributed on an
 ~~ "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 ~~ KIND, either express or implied.  See the License for the
 ~~ specific language governing permissions and limitations
 ~~ under the License.

 -----
 Developing a web application
 -----
 Stephen Connolly
 ------
 2011-01-17
 ------

Developing a web application

  The aim here is to combine the usage of the <<<cassandra-maven-plugin>>> with the <<<jetty-maven-plugin>>> to make
  development testing of the web application a lot easier. The developer does not have to manually install either
  Apache Cassandra or a Servlet container.

  Note: the following examples assume you have put a reference to both <<<cassandra-maven-plugin>>> and
  <<<jetty-maven-plugin>>> into your <<<pom.xml>>>, e.g. for <<<cassandra-maven-plugin>>> you would add the following:

---
<project>
  ...
  <build>
    ...
    <plugins>
      ...
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>cassandra-maven-plugin</artifactId>
        <version>${project.version}</version>
      </plugin>
      ...
    </plugins>
    ...
  </build>
  ...
</project>
---

  If you cannot modify the <<<pom.xml>>> then you may have to specify the full coordinates for the goals, i.e.
  in stead of calling <<<cassandra:start>>> you would have to call
  <<<org.codehaus.mojo:cassandra-maven-plugin:${project.version}:start>>> unless you are happy using
  the latest version of the plugin.

  The only issue out of the starting blocks is that both <<<jetty>>> and <<<cassandra>>> want to use port 8080.
  From the command line, we can get almost all that we want from a simple

---
mvn cassandra:start jetty:run -Dcassandra.jmxPort=18080
---

  Or

---
mvn cassandra:start jetty:run -Djetty.port=8000
---

  If the web application is expecting keyspaces to be defined, we can use a <<<cassandra-cli>>> script to create the
  keyspaces for us. We create a file called <<<src/cassandra/cli/load.script>>>. By default <<<cassandra:start>>>
  will run this script if the cassandra instance has not been created yet. If the automatic detection does not
  work for you, you can invoke <<<cassandra:load>>> manually.

---
mvn cassandra:start cassandra:load jetty:run -Djetty.port=8000
---

  Thereafter we can skip the <<<cassandra:load>>> unless we run <<<mvn clean>>> and the automatic detection does not
  work again.

  If we actually want to wipe all the data between Maven runs, we would use:

---
mvn cassandra:delete cassandra:start jetty:run -Djetty.port=8000
---

  if relying on the auto-detection, otherwise we would use

---
mvn cassandra:delete cassandra:start cassandra:load jetty:run -Djetty.port=8000
---

* Trademarks

  Apache, Apache Maven, Apache Cassandra, Maven, Cassandra and the Apache feather logo are trademarks of The Apache Software Foundation.

