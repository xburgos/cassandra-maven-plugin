<document>
  <properties>
    <author email="m2@corridor-software.us">Kris Bravo</author>
    <title>Usage</title>
  </properties>
  <head/>
  <body>
    <section name="Usage">
      <p>
		For starters, please read the <a href="http://xmlbeans.apache.org/documentation/index.html">
		XMLBeans tutorial</a>.
      </p>

      <p>Basic usage consists of adding a reference to the plugins section of your Maven 2 project as shown here.
        <source>
<![CDATA[
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>xmlbeans-maven-plugin</artifactId>
        <executions>
           <execution>
              <goals>
                 <goal>xmlbeans</goal>
              </goals>
           </execution>
        </executions>
        <inherited>true</inherited>
        <configuration>
           <schemaDirectory>src/main/xsd</schemaDirectory>
        </configuration>
      </plugin>
]]>
        </source>
      </p>
      
      <p>By default, the plugin looks for the src/main/xsd directory to exist, so it isn't necessary to specify it. Nor
      do you need to specify src/main/xsdconfig, the assumed location of any xsd config files to use during the parsing and
      creation of the object model. However, you can add additional xsdconfig directories as shown below.

        <source>
<![CDATA[
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>xmlbeans-maven-plugin</artifactId>
        <version>1.0-SNAPSHOT</version>
        <executions>
           <execution>
              <goals>
                 <goal>xmlbeans</goal>
              </goals>
           </execution>
        </executions>
        <inherited>true</inherited>
        <configuration>
           <xmlConfigs>
              <xmlConfig implementation="java.io.File">src/main/xsdconfig</xmlConfig>
              <xmlConfig implementation="java.io.File">src/main/xsdconfig2/explicit.xsdconfig</xmlConfig>
           </xmlConfigs>
        </configuration>
      </plugin>
]]>
        </source>
      </p>

      <p>XML Beans models may be generated for the test compile as well. Although the schemaDirectory is 
      defined in the example below, the default xsd directory for the test cycle is in fact src/test/xsd.
        <source>
<![CDATA[
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>maven-xmlbeans-plugin</artifactId>
        <executions>
           <execution>
              <goals>
                 <goal>xmlbeans-test</goal>
              </goals>
           </execution>
        </executions>
        <inherited>true</inherited>
        <configuration>
           <schemaDirectory>src/test/xsd</schemaDirectory>
        </configuration>
      </plugin>
]]>
        </source>
      </p>
      
      <p>
        Schemas located within an artifact jar your project is dependent upon can be used as
        source schemas. In the example below the geronimo-tomcat jar is expected to be a listed
        depedency of the project. Any schemas ending with .xsd or .XSD will be extracted from the
        artifact and an object model of these schemas will be produced. Also in the example, the
        memory max of the schema compiler is set - this may be needed for large schema sets.
        <source>
<![CDATA[
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>xmlbeans-maven-plugin</artifactId>
        <executions>
           <execution>
              <goals>
                 <goal>xmlbeans</goal>
              </goals>
           </execution>
        </executions>
        <configuration>
           <memoryInitialSize>50m</memoryInitialSize>
           <memoryMaximumSize>80m</memoryMaximumSize>
           <xsdJars>
              <xsdJar implementation="java.lang.String">geronimo:geronimo-tomcat</xsdJar>
           </xsdJars>
        </configuration>
      </plugin>
]]>
        </source>
      </p>
      
      <p>
        The goals available are are <code>xmlbeans:xmlbeans</code> and <code>xmlbeans:xmlbeans-test</code>.
      </p>
    </section>

  </body>
</document>
