<!--
The MIT License

Copyright (c) 2004, The Codehaus

Permission is hereby granted, free of charge, to any person obtaining a copy of
this software and associated documentation files (the "Software"), to deal in
the Software without restriction, including without limitation the rights to
use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
of the Software, and to permit persons to whom the Software is furnished to do
so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
-->
<pluginMetadata>
	<mojos>

		<mojo>
			<goal>WSDL2Java</goal>
			<call>makeJavaFromWSDL</call>
			<description>
				The WSDL2Java task creates Java classes and deployment
				descriptor templates from a Web Services Description
				Language (WSDL) file.
			</description>
			<requiresDependencyResolution>
				runtime
			</requiresDependencyResolution>
			<parameters>

				<parameter>
					<name>wasHome</name>
					<property>wasHome</property>
					<required>true</required>
					<expression>${wasHome}</expression>
					<type>java.lang.String</type>
					<description>
						Location of WebSphere installation (normally the
						WAS_HOME environment variable). [path to
						WebSphere]
					</description>
				</parameter>

				<parameter>
					<name>url</name>
					<property>url</property>
					<required>true</required>
					<expression>${url}</expression>
					<type>java.lang.String</type>
					<description>
						Location of input WSDL document.
					</description>
				</parameter>

				<parameter>
					<name>output</name>
					<property>output</property>
					<required>false</required>
					<expression>${output}</expression>
					<defaultValue>
						${project.source.directory}
					</defaultValue>
					<type>java.lang.String</type>
					<description>
						Root directory for emitted files.
					</description>
				</parameter>

				<parameter>
					<name>role</name>
					<property>role</property>
					<required>false</required>
					<expression>${role}</expression>
					<defaultValue>client</defaultValue>
					<type>java.lang.String</type>
					<description>
						J2EE development role
						[client|deploy-client|deploy-server|develop-client|develop-server|server]
					</description>
				</parameter>

				<parameter>
					<name>container</name>
					<property>container</property>
					<required>true</required>
					<expression>${container}</expression>
					<defaultValue>client</defaultValue>
					<type>java.lang.String</type>
					<description>
						J2EE container [client|ejb|web|none].
					</description>
				</parameter>

				<parameter>
					<name>genjava</name>
					<property>genjava</property>
					<required>false</required>
					<expression>${genjava}</expression>
					<type>java.lang.String</type>
					<description>
						Generate java files only (Do not run rmic and
						compile) [true|false]
					</description>
				</parameter>

				<parameter>
					<name>verbose</name>
					<property>verbose</property>
					<required>false</required>
					<expression>${verbose}</expression>
					<type>java.lang.String</type>
					<description>
						Verbose outout [true|false]
					</description>
				</parameter>

			</parameters>

		</mojo>

		<mojo>
			<goal>Java2WSDL</goal>
			<call>makeWSDLFromJava</call>
			<requiresDependencyResolution>
				runtime
			</requiresDependencyResolution>
			<description>
				The Java2WSDL command maps a Java class to a Web
				Services Description Language (WSDL) file by following
				the Java API for XML-based remote procedure call
				(JAX-RPC) specification. The Java2WSDL command accepts a
				Java class as input and produces a WSDL file
				representing the input class. If there is an existing
				file at the output location, it is overwritten. The WSDL
				file generated by the Java2WSDL command contains WSDL
				and XML schema constructs that are automatically derived
				from the input class. You can override these default
				values with command-line arguments.
			</description>
			<parameters>

				<parameter>
					<name>wasHome</name>
					<property>wasHome</property>
					<required>true</required>
					<expression>${wasHome}</expression>
					<type>java.lang.String</type>
					<description>
						Location of WebSphere installation (normally the
						WAS_HOME environment variable). [path to
						WebSphere]
					</description>
				</parameter>

				<parameter>
					<name>output</name>
					<property>output</property>
					<required>false</required>
					<expression>${output}</expression>
					<type>java.lang.String</type>
					<description>
						Pathname of wsdl file to create
					</description>
				</parameter>

				<parameter>
					<name>className</name>
					<property>className</property>
					<required>false</required>
					<expression>${className}</expression>
					<type>java.lang.String</type>
					<description>
						Represents the fully qualified name of one of
						the following Java classes: * Stateless session
						EJB remote interface that extends the
						javax.ejb.EJBObject class * Service Endpoint
						Interface that extends the java.rmi.Remote class
						* Java bean
					</description>
				</parameter>

				<parameter>
					<name>implClass</name>
					<property>implClass</property>
					<required>false</required>
					<expression>${implClass}</expression>
					<type>java.lang.String</type>
					<description>
						The Java2WSDL command uses method parameter
						names to construct the WSDL file message part
						names. The command automatically obtains the
						message names from the debug information in the
						class. If the class is compiled without debug
						information, or if the class is an interface,
						the method parameter names are not available. In
						this case, you can use the -implClass argument
						to provide an alternative class from which to
						obtain method parameter names. The impl-class
						does not need to implement the class if the
						class is an interface, but it must implement the
						same methods as class.
					</description>
				</parameter>

				<parameter>
					<name>namespace</name>
					<property>namespace</property>
					<required>false</required>
					<expression>${namespace}</expression>
					<type>java.lang.String</type>
					<description>
						Target namespace for the WSDL file being
						generated
					</description>
				</parameter>

				<parameter>
					<name>location</name>
					<property>location</property>
					<required>false</required>
					<expression>${location}</expression>
					<type>java.lang.String</type>
					<description>
						Location or URL of the service
					</description>
				</parameter>

				<parameter>
					<name>mapNamespace</name>
					<property>mapNamespace</property>
					<required>false</required>
					<expression>${mapNamespace}</expression>
					<type>java.lang.String</type>
					<description>Namespace to map to</description>
				</parameter>

				<parameter>
					<name>mapPackage</name>
					<property>mapPackage</property>
					<required>false</required>
					<expression>${mapPackage}</expression>
					<type>java.lang.String</type>
					<description>Java package to map</description>
				</parameter>

			</parameters>

		</mojo>

		<mojo>

			<goal>EJBDeploy</goal>
			<call>EJBDeploy</call>
			<description>
				This goal generates WebSphere specific deploymentcode
				for an ejb jarfile.
			</description>
			<requiresProject>true</requiresProject>
			<requiresDependencyResolution>
				runtime
			</requiresDependencyResolution>

			<parameters>

				<parameter>
					<name>mavenproject</name>
					<required>true</required>
					<readonly>true</readonly>
					<expression>${project}</expression>
					<type>org.apache.maven.project.MavenProject</type>
					<description>
						This is the pom for the project. Property is
						read-only (i.e you can not set it)
					</description>
				</parameter>

				<parameter>
					<name>wasHome</name>
					<property>wasHome</property>
					<required>true</required>
					<expression>${wasHome}</expression>
					<type>java.lang.String</type>
					<description>
						Location of WebSphere installation (normally the
						WAS_HOME environment variable). [path to
						WebSphere]
					</description>
				</parameter>

				<parameter>
					<name>workingDirectory</name>
					<property>workingDirectory</property>
					<required>false</required>
					<expression>${workingDirectory}</expression>
					<type>java.lang.String</type>
					<description>
						Temporary directory for the deploy tool to use.
						If not set, the Java System Property user.home
						is used. Do not include a trailing
						pathseparator.
					</description>
				</parameter>

				<parameter>
					<name>sourceDirectory</name>
					<property>sourceDirectory</property>
					<required>false</required>
					<defaultValue>${basedir}/target</defaultValue>
					<expression>${sourceDirectory}</expression>
					<type>java.lang.String</type>
					<description>
						Source directory for the deploy tool to use. If
						not set, the project target directory is used.
					</description>
				</parameter>

				<parameter>
					<name>targetDirectory</name>
					<property>targetDirectory</property>
					<required>false</required>
					<defaultValue>${basedir}/target</defaultValue>
					<expression>${targetDirectory}</expression>
					<type>java.lang.String</type>
					<description>
						Target directory for the deploy tool to use. If
						not set, the project target directory is used.
					</description>
				</parameter>

				<parameter>
					<name>inputJar</name>
					<property>inputJar</property>
					<required>true</required>
					<expression>${inputJar}</expression>
					<type>java.lang.String</type>
					<description>
						Specifies the undeployed EJB Jar file you wish
						to deploy.
					</description>
				</parameter>

				<parameter>
					<name>outputJar</name>
					<property>outputJar</property>
					<required>true</required>
					<expression>${outputJar}</expression>
					<type>java.lang.String</type>
					<description>
						Specifies the name of the deployed EJB Jar to
						create.
					</description>
				</parameter>

				<parameter>
					<name>codegen</name>
					<property>codegen</property>
					<required>false</required>
					<expression>${codegen}</expression>
					<type>java.lang.String</type>
					<description>
						Only generate the deployment code, do not run
						RMIC or Javac [true].
					</description>
				</parameter>

				<parameter>
					<name>dbschema</name>
					<property>dbschema</property>
					<required>false</required>
					<expression>${dbschema}</expression>
					<type>java.lang.String</type>
					<description>
						Specifies the name of the database schema to
						create.
					</description>
				</parameter>

				<parameter>
					<name>dbvendor</name>
					<property>dbvendor</property>
					<required>false</required>
					<expression>${dbvendor}</expression>
					<type>java.lang.String</type>
					<description>
						Specifies the type of database the EJBs will
						use. Some of the valid types are : DB2UDB_V72
						DB2UDB_V81 CLOUDSCAPE_V5 DB2UDBOS390_V6
						DB2UDBOS390_V7 DB2UDBOS390_V8 DB2UDBISERIES
						INFORMIX_V73 INFORMIX_V93 INFORMIX_V94
						MSSQLSERVER_V7 MSSQLSERVER_2000 ORACLE_V8
						ORACLE_V9I SYBASE_V1200 SYBASE_V1250 MYSQL_V323
					</description>
				</parameter>

				<parameter>
					<name>dynamic</name>
					<property>dynamic</property>
					<required>false</required>
					<expression>${dynamic}</expression>
					<type>java.lang.String</type>
					<description>
						Specifies to enable dynamic query support
						[true].
					</description>
				</parameter>

				<parameter>
					<name>keepGenerated</name>
					<property>keepGenerated</property>
					<required>false</required>
					<expression>${keepGenerated}</expression>
					<type>java.lang.String</type>
					<description>
						Set to prevent the workingDirectory from being
						deleted [true].
					</description>
				</parameter>

				<parameter>
					<name>quiet</name>
					<property>quiet</property>
					<required>false</required>
					<expression>${quiet}</expression>
					<type>java.lang.String</type>
					<description>
						Set to display informational messages [false].
					</description>
				</parameter>

				<parameter>
					<name>noValidate</name>
					<property>noValidate</property>
					<required>false</required>
					<expression>${noValidate}</expression>
					<type>java.lang.String</type>
					<description>
						Set to disable validation messages [true].
					</description>
				</parameter>

				<parameter>
					<name>noWarnings</name>
					<property>noWarnings</property>
					<required>false</required>
					<expression>${noWarnings}</expression>
					<type>java.lang.String</type>
					<description>
						Set to disable warning and informational
						messages [true].
					</description>
				</parameter>

				<parameter>
					<name>noInform</name>
					<property>noInform</property>
					<required>false</required>
					<expression>${noInform}</expression>
					<type>java.lang.String</type>
					<description>
						Set to disable informational messages [true].
					</description>
				</parameter>

				<parameter>
					<name>rmicOptions</name>
					<property>rmicOptions</property>
					<required>false</required>
					<expression>${rmicOptions}</expression>
					<type>java.lang.String</type>
					<description>
						Allows additional arguments to be passed to the
						rmic command.
					</description>
				</parameter>

				<parameter>
					<name>compatible</name>
					<property>compatible</property>
					<required>false</required>
					<expression>${compatible}</expression>
					<type>java.lang.String</type>
					<description>
						Set to use WebSphere 3.5 or 4.0 compatible
						mapping rules [-35|-40].
					</description>
				</parameter>

				<parameter>
					<name>sqlj</name>
					<property>sqlj</property>
					<required>false</required>
					<expression>${sqlj}</expression>
					<type>java.lang.String</type>
					<description>
						Set to generate SQL/J persistor code [-sqlj].
					</description>
				</parameter>

				<parameter>
					<name>trace</name>
					<property>trace</property>
					<required>false</required>
					<expression>${trace}</expression>
					<type>java.lang.String</type>
					<description>
						Set to enable internal deploy tool tracing
						[true].
					</description>
				</parameter>

				<parameter>
					<name>failonerror</name>
					<property>failonerror</property>
					<required>false</required>
					<expression>${failonerror}</expression>
					<type>java.lang.String</type>
					<description>
						Set to cause your build to not stop on deploy
						errors [true].
					</description>
				</parameter>

				<parameter>
					<name>jvmMaxMemory</name>
					<property>jvmMaxMemory</property>
					<required>false</required>
					<expression>${jvmMaxMemory}</expression>
					<type>java.lang.String</type>
					<description>
						Sets maximum size of the memory for the
						underlying VM. Defaults to -Xmx256m. [-Xmx...M]
					</description>
				</parameter>

				<parameter>
					<name>targetWAS</name>
					<property>targetWAS</property>
					<required>false</required>
					<expression>${targetWAS}</expression>
					<type>java.lang.String</type>
					<description>
						Set the server target, to one of: WAS510 WAS502
						WAS501 WAS500 Defaults to WAS502
					</description>
				</parameter>

			</parameters>

		</mojo>

		<mojo>

			<goal>InstallApplication</goal>
			<call>InstallApplication</call>
			<description>
				Installs an ear/war/jar file to WebSphere.
			</description>
			<parameters>

				<parameter>
					<name>wasHome</name>
					<property>wasHome</property>
					<required>true</required>
					<expression>${wasHome}</expression>
					<type>java.lang.String</type>
					<description>
						Location of WebSphere installation (normally the
						WAS_HOME environment variable). [path to
						WebSphere]
					</description>
				</parameter>

				<parameter>
					<name>targetDirectory</name>
					<property>targetDirectory</property>
					<required>false</required>
					<defaultValue>${basedir}/target</defaultValue>
					<expression>${targetDirectory}</expression>
					<type>java.lang.String</type>
					<description>
						Directory where ear/jar file to install resides.
						Default is project target dir.
					</description>
				</parameter>

				<parameter>
					<name>ear</name>
					<property>ear</property>
					<required>true</required>
					<expression>${ear}</expression>
					<type>java.lang.String</type>
					<description>
						The ear file you wish to install.
					</description>
				</parameter>

				<parameter>
					<name>server</name>
					<property>server</property>
					<required>false</required>
					<defaultValue>server1</defaultValue>
					<expression>${server}</expression>
					<type>java.lang.String</type>
					<description>
						Contains the name of the server on which you
						want to install the application. Defaults to
						server1. [servername]
					</description>
				</parameter>

				<parameter>
					<name>wasCell</name>
					<property>wasCell</property>
					<required>false</required>
					<expression>${wasCell}</expression>
					<type>java.lang.String</type>
					<description>
						Contains the name of the server on which you
						want to install the application. Defaults to
						name of server. [cellname]
					</description>
				</parameter>

				<parameter>
					<name>wasNode</name>
					<property>wasNode</property>
					<required>false</required>
					<expression>${wasNode}</expression>
					<type>java.lang.String</type>
					<description>
						Contains the name of the server on which you
						want to install the application. Defaults to
						name of server. [nodename]
					</description>
				</parameter>

			</parameters>

		</mojo>

		<mojo>

			<goal>ListApplications</goal>
			<call>ListApplications</call>
			<description>
				This goal lists all the applications installed on a
				WebSphere Server or Cell.
			</description>
			<parameters>

				<parameter>
					<name>wasHome</name>
					<property>wasHome</property>
					<required>true</required>
					<expression>${wasHome}</expression>
					<type>java.lang.String</type>
					<description>
						Location of WebSphere installation (normally the
						WAS_HOME environment variable). [path to
						WebSphere]
					</description>
				</parameter>

				<parameter>
					<name>server</name>
					<property>server</property>
					<required>false</required>
					<defaultValue>server1</defaultValue>
					<expression>${server}</expression>
					<type>java.lang.String</type>
					<description>
						Contains the name of the server on which you
						want to list applications. Defaults to server1.
						[servername]
					</description>
				</parameter>

				<parameter>
					<name>wasCell</name>
					<property>wasCell</property>
					<required>false</required>
					<expression>${wasCell}</expression>
					<type>java.lang.String</type>
					<description>
						Contains the name of the server that runs the
						applications you wish to list. Defaults to
						name of server. [cellname]
					</description>
				</parameter>

				<parameter>
					<name>wasNode</name>
					<property>wasNode</property>
					<required>false</required>
					<expression>${wasNode}</expression>
					<type>java.lang.String</type>
					<description>
						Contains the name of the server that runs the
						applications you wish to list. Defaults to
						name of server. [nodename]
					</description>
				</parameter>

			</parameters>

		</mojo>

		<mojo>

			<goal>UninstallApplication</goal>
			<call>UninstallApplication</call>
			<description>
				Uinstalls an application from WebSphere.
			</description>
			<parameters>

				<parameter>
					<name>wasHome</name>
					<property>wasHome</property>
					<required>true</required>
					<expression>${wasHome}</expression>
					<type>java.lang.String</type>
					<description>
						Location of WebSphere installation (normally the
						WAS_HOME environment variable). [path to
						WebSphere]
					</description>
				</parameter>

				<parameter>
					<name>server</name>
					<property>server</property>
					<required>false</required>
					<defaultValue>server1</defaultValue>
					<expression>${server}</expression>
					<type>java.lang.String</type>
					<description>
						Contains the name of the server that runs the
						application you wish to uninstall. Defaults to
						server1. [servername]
					</description>
				</parameter>

				<parameter>
					<name>wasCell</name>
					<property>wasCell</property>
					<required>false</required>
					<expression>${wasCell}</expression>
					<type>java.lang.String</type>
					<description>
						Contains the name of the server that runs the
						application you wish to uninstall. Defaults to
						name of server. [cellname]
					</description>
				</parameter>

				<parameter>
					<name>wasNode</name>
					<property>wasNode</property>
					<required>false</required>
					<expression>${wasNode}</expression>
					<type>java.lang.String</type>
					<description>
						Contains the name of the server that runs the
						application you wish to uninstall. Defaults to
						name of server. [nodename]
					</description>
				</parameter>

				<parameter>
					<name>ear</name>
					<property>ear</property>
					<required>true</required>
					<expression>${ear}</expression>
					<type>java.lang.String</type>
					<description>
						The name of the application you wish to
						uninstall.
					</description>
				</parameter>

			</parameters>

		</mojo>

		<mojo>

			<goal>StartServer</goal>
			<call>StartServer</call>
			<description>
				This task enables you to start a standalone server
				instance. This is not used to start a server controlled
				by DeploymentManager. Therefore, this task is useful for
				the Base Application Server, and to start the Node Agent
				and/or DeploymentManager. If you wish to start a server
				managed by the Deployment Manager, use the wsadmin task
				to execute a scripting command
			</description>

			<parameters>

				<parameter>
					<name>wasHome</name>
					<property>wasHome</property>
					<required>true</required>
					<expression>${wasHome}</expression>
					<type>java.lang.String</type>
					<description>
						Location of WebSphere installation (normally the
						WAS_HOME environment variable). [path to
						WebSphere]
					</description>
				</parameter>

				<parameter>
					<name>server</name>
					<property>server</property>
					<required>false</required>
					<defaultValue>server1</defaultValue>
					<expression>${server}</expression>
					<type>java.lang.String</type>
					<description>
						Contains the name of the server you wish to
						start. Defaults to server1. [servername]
					</description>
				</parameter>

				<parameter>
					<name>wasCell</name>
					<property>wasCell</property>
					<required>false</required>
					<expression>${wasCell}</expression>
					<type>java.lang.String</type>
					<description>
						Contains the name of the server you wish to
						start. Defaults to name of server. [cellname]
					</description>
				</parameter>

				<parameter>
					<name>wasNode</name>
					<property>wasNode</property>
					<required>false</required>
					<expression>${wasNode}</expression>
					<type>java.lang.String</type>
					<description>
						Contains the name of the server you wish to
						start. Defaults to name of server. [nodename]
					</description>
				</parameter>

				<parameter>
					<name>noWait</name>
					<property>noWait</property>
					<required>false</required>
					<expression>${noWait}</expression>
					<type>java.lang.String</type>
					<description>
						If set, the task with return immediately without
						waiting for the server to start. [-nowait]
					</description>
				</parameter>

				<parameter>
					<name>quiet</name>
					<property>quiet</property>
					<required>false</required>
					<expression>${quiet}</expression>
					<type>java.lang.String</type>
					<description>
						If true, the task will not print any status
						information. [-quiet]
					</description>
				</parameter>

				<parameter>
					<name>logFile</name>
					<property>logFile</property>
					<required>false</required>
					<expression>${logFile}</expression>
					<type>java.lang.String</type>
					<description>
						Specifies the name of the file to log the server
						start information to. [name of logfile]
					</description>
				</parameter>

				<parameter>
					<name>replaceLog</name>
					<property>replaceLog</property>
					<required>false</required>
					<expression>${replaceLog}</expression>
					<type>java.lang.String</type>
					<description>
						If true, the task with erase an existing log
						file, instead of appending. [-replacelog]
					</description>
				</parameter>

				<parameter>
					<name>trace</name>
					<property>trace</property>
					<required>false</required>
					<expression>${trace}</expression>
					<type>java.lang.String</type>
					<description>
						If true, the task with print trace information.
						[-trace]
					</description>
				</parameter>

				<parameter>
					<name>script</name>
					<property>script</property>
					<required>false</required>
					<expression>${script}</expression>
					<type>java.lang.String</type>
					<description>
						The name of a script file to execute during
						server startup. [name of scriptfile]
					</description>
				</parameter>

				<parameter>
					<name>timeout</name>
					<property>timeout</property>
					<required>false</required>
					<expression>${timeout}</expression>
					<type>java.lang.String</type>
					<description>
						Amount of time to wait for the server to start.
						[seconds to wait]
					</description>
				</parameter>

				<parameter>
					<name>statusPort</name>
					<property>statusPort</property>
					<required>false</required>
					<expression>${statusPort}</expression>
					<type>java.lang.String</type>
					<description>
						Port for the server to send status messages to.
						[port number]
					</description>
				</parameter>

				<parameter>
					<name>user</name>
					<property>user</property>
					<required>false</required>
					<expression>${user}</expression>
					<type>java.lang.String</type>
					<description>
						User ID to authenticate with if security is
						turned on. [username]
					</description>
				</parameter>

				<parameter>
					<name>password</name>
					<property>password</property>
					<required>false</required>
					<expression>${password}</expression>
					<type>java.lang.String</type>
					<description>
						Password to authenticate with. [password]
					</description>
				</parameter>

			</parameters>

		</mojo>

		<mojo>

			<goal>StopServer</goal>
			<call>StopServer</call>
			<description>
				This task enables you to stop a standalone server
				instance. This is not used to stop a server controlled
				by DeploymentManager. Therefore, this task is useful for
				the Base Application Server, and to stop the Node Agent
				and/or DeploymentManager.
			</description>

			<parameters>

				<parameter>
					<name>wasHome</name>
					<property>wasHome</property>
					<required>true</required>
					<expression>${wasHome}</expression>
					<type>java.lang.String</type>
					<description>
						Location of WebSphere installation (normally the
						WAS_HOME environment variable). [path to
						WebSphere]
					</description>
				</parameter>

				<parameter>
					<name>server</name>
					<property>server</property>
					<required>false</required>
					<expression>${server}</expression>
					<defaultValue>server1</defaultValue>
					<type>java.lang.String</type>
					<description>
						Contains the name of the server you wish to
						start. Defaults to server1. [servername]
					</description>
				</parameter>

				<parameter>
					<name>wasCell</name>
					<property>wasCell</property>
					<required>false</required>
					<expression>${wasCell}</expression>
					<type>java.lang.String</type>
					<description>
						Contains the name of the server you wish to
						start. Defaults to name of server. [cellname]
					</description>
				</parameter>

				<parameter>
					<name>wasNode</name>
					<property>wasNode</property>
					<required>false</required>
					<expression>${wasNode}</expression>
					<type>java.lang.String</type>
					<description>
						Contains the name of the server you wish to
						start. Defaults to name of server. [nodename]
					</description>
				</parameter>

				<parameter>
					<name>noWait</name>
					<property>noWait</property>
					<expression>${noWait}</expression>
					<required>false</required>
					<type>java.lang.String</type>
					<description>
						If true, the task with return immediately
						without waiting for the server to start.
						[-nowait]
					</description>
				</parameter>

				<parameter>
					<name>quiet</name>
					<property>quiet</property>
					<expression>${quiet}</expression>
					<required>false</required>
					<type>java.lang.String</type>
					<description>
						If true, the task will not print any status
						information. [-quiet]
					</description>
				</parameter>

				<parameter>
					<name>logFile</name>
					<property>logFile</property>
					<expression>${logFile}</expression>
					<required>false</required>
					<type>java.lang.String</type>
					<description>
						Specifies the name of the file to log the server
						start information to. [logfile name]
					</description>
				</parameter>

				<parameter>
					<name>replaceLog</name>
					<property>replaceLog</property>
					<expression>${replaceLog}</expression>
					<required>false</required>
					<type>java.lang.String</type>
					<description>
						If set, the task will erase an existing log
						file, instead of appending. [-replacelog]
					</description>
				</parameter>

				<parameter>
					<name>trace</name>
					<property>trace</property>
					<expression>${trace}</expression>
					<required>false</required>
					<type>java.lang.String</type>
					<description>
						If set, the task will print trace information.
						[-trace]
					</description>
				</parameter>

				<parameter>
					<name>script</name>
					<property>script</property>
					<expression>${script}</expression>
					<type>java.lang.String</type>
					<description>
						The name of a script file to execute during
						server startup. [name of scriptfile]
					</description>
				</parameter>

				<parameter>
					<name>timeout</name>
					<property>timeout</property>
					<expression>${timeout}</expression>
					<required>false</required>
					<type>java.lang.String</type>
					<description>
						Amount of time to wait for the server to start.
						[seconds to wait]
					</description>
				</parameter>

				<parameter>
					<name>statusPort</name>
					<property>statusPort</property>
					<expression>${statusPort}</expression>
					<required>false</required>
					<type>java.lang.String</type>
					<description>
						Port for the server to send status messages to.
						[port number]
					</description>
				</parameter>

				<parameter>
					<name>connectionType</name>
					<property>connectionType</property>
					<expression>${connectionType}</expression>
					<required>false</required>
					<type>java.lang.String</type>
					<description>
						Specifies the admin transport type to connect to
						the server with [SOAP | RMI].
					</description>
				</parameter>

				<parameter>
					<name>user</name>
					<property>user</property>
					<expression>${user}</expression>
					<required>false</required>
					<type>java.lang.String</type>
					<description>
						User ID to authenticate with if security is
						turned on. [username]
					</description>
				</parameter>

				<parameter>
					<name>password</name>
					<property>password</property>
					<expression>${password}</expression>
					<required>false</required>
					<type>java.lang.String</type>
					<description>
						Password to authenticate with. [password]
					</description>
				</parameter>

				<parameter>
					<name>failonerror</name>
					<property>failonerror</property>
					<required>false</required>
					<type>java.lang.String</type>
					<description>
						If set causes the build to stop if the task has
						an error. [-failonerror]
					</description>
				</parameter>

			</parameters>

		</mojo>

		<mojo>

			<goal>ServerStatus</goal>
			<call>ServerStatus</call>
			<description>
				The ServerStatus task enables you to get status on a
				server instance or all server instances.
			</description>

			<parameters>

				<parameter>
					<name>wasHome</name>
					<property>wasHome</property>
					<required>true</required>
					<expression>${wasHome}</expression>
					<type>java.lang.String</type>
					<description>
						Location of WebSphere installation (normally the
						WAS_HOME environment variable). [path to
						WebSphere]
					</description>
				</parameter>

				<parameter>
					<name>server</name>
					<property>server</property>
					<required>false</required>
					<expression>${server}</expression>
					<defaultValue>server1</defaultValue>
					<type>java.lang.String</type>
					<description>
						Contains the name of the server you wish to
						get status for. Defaults to server1. [servername]
					</description>
				</parameter>

				<parameter>
					<name>wasCell</name>
					<property>wasCell</property>
					<required>false</required>
					<expression>${wasCell}</expression>
					<type>java.lang.String</type>
					<description>
						Contains the name of the server you wish to
						get status for. Defaults to name of server. [cellname]
					</description>
				</parameter>

				<parameter>
					<name>wasNode</name>
					<property>wasNode</property>
					<required>false</required>
					<expression>${wasNode}</expression>
					<type>java.lang.String</type>
					<description>
						Contains the name of the server you wish to
						get status for. Defaults to name of server. [nodename]
					</description>
				</parameter>

				<parameter>
					<name>logFile</name>
					<property>logFile</property>
					<expression>${logFile}</expression>
					<required>false</required>
					<type>java.lang.String</type>
					<description>
						Specifies the name of the file to log the server
						status information to. [logfile name]
					</description>
				</parameter>

				<parameter>
					<name>replaceLog</name>
					<property>replaceLog</property>
					<expression>${replaceLog}</expression>
					<required>false</required>
					<type>java.lang.String</type>
					<description>
						If set, the task will erase an existing log
						file, instead of appending. [-replacelog]
					</description>
				</parameter>

				<parameter>
					<name>trace</name>
					<property>trace</property>
					<expression>${trace}</expression>
					<required>false</required>
					<type>java.lang.String</type>
					<description>
						If set, the task will print trace information.
						[-trace]
					</description>
				</parameter>

				<parameter>
					<name>user</name>
					<property>user</property>
					<expression>${user}</expression>
					<required>false</required>
					<type>java.lang.String</type>
					<description>
						User ID to authenticate with if security is
						turned on. [username]
					</description>
				</parameter>

				<parameter>
					<name>password</name>
					<property>password</property>
					<expression>${password}</expression>
					<required>false</required>
					<type>java.lang.String</type>
					<description>
						Password to authenticate with. [password]
					</description>
				</parameter>

			</parameters>

		</mojo>

		<mojo>

			<goal>StartApplication</goal>
			<call>StartApplication</call>
			<description>
				This task enables you to start an existing or newly
				installed application on a WebSphere Server or in a
				WebSphere Cell.
			</description>

			<parameters>

				<parameter>
					<name>wasHome</name>
					<property>wasHome</property>
					<required>true</required>
					<expression>${wasHome}</expression>
					<type>java.lang.String</type>
					<description>
						Location of WebSphere installation (normally the
						WAS_HOME environment variable). [path to
						WebSphere]
					</description>
				</parameter>

				<parameter>
					<name>server</name>
					<property>server</property>
					<required>false</required>
					<expression>${server}</expression>
					<defaultValue>server1</defaultValue>
					<type>java.lang.String</type>
					<description>
						Contains the name of the server that contains
						the application you whish to start. Defaults to
						server1. [servername]
					</description>
				</parameter>

				<parameter>
					<name>wasCell</name>
					<property>wasCell</property>
					<required>false</required>
					<expression>${wasCell}</expression>
					<type>java.lang.String</type>
					<description>
						Contains the name of the cell that contains the
						application you whish to start. Defaults to name
						of server. [cellname]
					</description>
				</parameter>

				<parameter>
					<name>wasNode</name>
					<property>wasNode</property>
					<required>false</required>
					<expression>${wasNode}</expression>
					<type>java.lang.String</type>
					<description>
						Contains the name of the nodethat contains the
						application you whish to start. Defaults to name
						of server. [nodename]
					</description>
				</parameter>

				<parameter>
					<name>ear</name>
					<property>ear</property>
					<required>true</required>
					<expression>${ear}</expression>
					<type>java.lang.String</type>
					<description>
						The name of the application you whish to start.
					</description>
				</parameter>
			</parameters>

		</mojo>

		<mojo>

			<goal>StopApplication</goal>
			<call>StopApplication</call>
			<description>
				This task enables you to stop an existing application on
				a WebSphere Server or in a WebSphere Cell.
			</description>

			<parameters>

				<parameter>
					<name>wasHome</name>
					<property>wasHome</property>
					<required>true</required>
					<expression>${wasHome}</expression>
					<type>java.lang.String</type>
					<description>
						Location of WebSphere installation (normally the
						WAS_HOME environment variable). [path to
						WebSphere]
					</description>
				</parameter>

				<parameter>
					<name>server</name>
					<property>server</property>
					<required>false</required>
					<expression>${server}</expression>
					<defaultValue>server1</defaultValue>
					<type>java.lang.String</type>
					<description>
						Contains the name of the server that hosts the
						application you wish to stop. Defaults to
						server1. [servername]
					</description>
				</parameter>

				<parameter>
					<name>wasCell</name>
					<property>wasCell</property>
					<required>false</required>
					<expression>${wasCell}</expression>
					<type>java.lang.String</type>
					<description>
						Contains the name of the cell that hosts the
						application you wish to stop. Defaults to name
						of server. [cellname]
					</description>
				</parameter>

				<parameter>
					<name>wasNode</name>
					<property>wasNode</property>
					<required>false</required>
					<expression>${wasNode}</expression>
					<type>java.lang.String</type>
					<description>
						Contains the name of the node that hosts the
						application you wish to stop. Defaults to name
						of server. [nodename]
					</description>
				</parameter>

				<parameter>
					<name>ear</name>
					<property>ear</property>
					<required>true</required>
					<expression>${ear}</expression>
					<type>java.lang.String</type>
					<description>
						The name of the application you wish to stop.
					</description>
				</parameter>

			</parameters>

		</mojo>

	</mojos>

</pluginMetadata>

